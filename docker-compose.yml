services:
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./MesaChain-BE/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - mesachain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mesachain-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: MesaChain-BE/Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./MesaChain-BE:/app
      - /app/node_modules
      - ./MesaChain-BE/prisma:/app/prisma
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=${PORT_BACKEND:-4000}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - STELLAR_NETWORK=${STELLAR_NETWORK}
      - HORIZON_URL=${HORIZON_URL}
      - API_BASE_URL_BACKEND=${API_BASE_URL_BACKEND}
      - API_BASE_URL_FRONTEND=${API_BASE_URL_FRONTEND}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mesachain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: MesaChain-FE/Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./MesaChain-FE:/app
      - /app/node_modules
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - VITE_STELLAR_NETWORK=${STELLAR_NETWORK}
      - VITE_HORIZON_URL=${HORIZON_URL}
      - VITE_API_BASE_URL_BACKEND=${API_BASE_URL_BACKEND}
      - VITE_API_BASE_URL_FRONTEND=${API_BASE_URL_FRONTEND}
    depends_on:
      - backend
    networks:
      - mesachain-network

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - mesachain-network

  alertmanager:
    image: prom/alertmanager:v0.27.0
    restart: unless-stopped
    secrets:
      - alertmanager_slack_webhook
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - mesachain-network
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:v2.52.0
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml
    networks:
      - mesachain-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:10.4.2
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:?Set strong password}
    networks:
      - mesachain-network
    depends_on:
      - prometheus

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mesachain-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    restart: unless-stopped
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx512m -Xms512m"
    networks:
      - mesachain-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/pipelines"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    restart: unless-stopped
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - mesachain-network

secrets:
  alertmanager_slack_webhook:
    external: true

volumes:
  postgres_data:
  redis_data:
  esdata:
  grafana_data:

networks:
  mesachain-network:
    driver: bridge